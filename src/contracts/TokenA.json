{
  "contractName": "TokenA",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "spender",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "spender",
          "type": "address"
        },
        {
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addMinter",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceMinter",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "spender",
          "type": "address"
        },
        {
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isMinter",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        },
        {
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "name": "_initial_supply",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "account",
          "type": "address"
        }
      ],
      "name": "MinterAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "account",
          "type": "address"
        }
      ],
      "name": "MinterRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    }
  ],
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b5060043610610128576000357c01000000000000000000000000000000000000000000000000000000009004806370a08231116100bf578063986502751161008e578063986502751461034f578063a457c2d714610357578063a9059cbb14610383578063aa271e1a146103af578063dd62ed3e146103d557610128565b806370a08231146102cf57806379cc6790146102f557806395d89b4114610321578063983b2d561461032957610128565b8063313ce567116100fb578063313ce5671461023a578063395093511461025857806340c10f191461028457806342966c68146102b057610128565b806306fdde031461012d578063095ea7b3146101aa57806318160ddd146101ea57806323b872dd14610204575b600080fd5b610135610403565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561016f578181015183820152602001610157565b50505050905090810190601f16801561019c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101d6600480360360408110156101c057600080fd5b50600160a060020a038135169060200135610499565b604080519115158252519081900360200190f35b6101f2610505565b60408051918252519081900360200190f35b6101d66004803603606081101561021a57600080fd5b50600160a060020a0381358116916020810135909116906040013561050b565b6102426105c2565b6040805160ff9092168252519081900360200190f35b6101d66004803603604081101561026e57600080fd5b50600160a060020a0381351690602001356105cb565b6101d66004803603604081101561029a57600080fd5b50600160a060020a038135169060200135610669565b6102cd600480360360208110156102c657600080fd5b5035610692565b005b6101f2600480360360208110156102e557600080fd5b5035600160a060020a031661069f565b6102cd6004803603604081101561030b57600080fd5b50600160a060020a0381351690602001356106ba565b6101356106c8565b6102cd6004803603602081101561033f57600080fd5b5035600160a060020a0316610729565b6102cd610746565b6101d66004803603604081101561036d57600080fd5b50600160a060020a038135169060200135610751565b6101d66004803603604081101561039957600080fd5b50600160a060020a03813516906020013561079c565b6101d6600480360360208110156103c557600080fd5b5035600160a060020a03166107a9565b6101f2600480360360408110156103eb57600080fd5b50600160a060020a03813581169160200135166107c2565b60048054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561048f5780601f106104645761010080835404028352916020019161048f565b820191906000526020600020905b81548152906001019060200180831161047257829003601f168201915b5050505050905090565b6000600160a060020a03831615156104b057600080fd5b336000818152600160209081526040808320600160a060020a0388168085529083529281902086905580518681529051929392600080516020610c4d833981519152929181900390910190a350600192915050565b60025490565b600160a060020a038316600090815260016020908152604080832033845290915281205461053f908363ffffffff6107ed16565b600160a060020a038516600090815260016020908152604080832033845290915290205561056e848484610802565b600160a060020a038416600081815260016020908152604080832033808552908352928190205481519081529051929392600080516020610c4d833981519152929181900390910190a35060019392505050565b60065460ff1690565b6000600160a060020a03831615156105e257600080fd5b336000908152600160209081526040808320600160a060020a0387168452909152902054610616908363ffffffff6108cf16565b336000818152600160209081526040808320600160a060020a038916808552908352928190208590558051948552519193600080516020610c4d833981519152929081900390910190a350600192915050565b6000610674336107a9565b151561067f57600080fd5b61068983836108e8565b50600192915050565b61069c3382610992565b50565b600160a060020a031660009081526020819052604090205490565b6106c48282610a3b565b5050565b60058054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561048f5780601f106104645761010080835404028352916020019161048f565b610732336107a9565b151561073d57600080fd5b61069c81610aeb565b61074f33610b33565b565b6000600160a060020a038316151561076857600080fd5b336000908152600160209081526040808320600160a060020a0387168452909152902054610616908363ffffffff6107ed16565b6000610689338484610802565b60006107bc60038363ffffffff610b7b16565b92915050565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b6000828211156107fc57600080fd5b50900390565b600160a060020a038216151561081757600080fd5b600160a060020a038316600090815260208190526040902054610840908263ffffffff6107ed16565b600160a060020a038085166000908152602081905260408082209390935590841681522054610875908263ffffffff6108cf16565b600160a060020a038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000828201838110156108e157600080fd5b9392505050565b600160a060020a03821615156108fd57600080fd5b600254610910908263ffffffff6108cf16565b600255600160a060020a03821660009081526020819052604090205461093c908263ffffffff6108cf16565b600160a060020a0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600160a060020a03821615156109a757600080fd5b6002546109ba908263ffffffff6107ed16565b600255600160a060020a0382166000908152602081905260409020546109e6908263ffffffff6107ed16565b600160a060020a038316600081815260208181526040808320949094558351858152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35050565b600160a060020a0382166000908152600160209081526040808320338452909152902054610a6f908263ffffffff6107ed16565b600160a060020a0383166000908152600160209081526040808320338452909152902055610a9d8282610992565b600160a060020a038216600081815260016020908152604080832033808552908352928190205481519081529051929392600080516020610c4d833981519152929181900390910190a35050565b610afc60038263ffffffff610bb216565b604051600160a060020a038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b610b4460038263ffffffff610c0016565b604051600160a060020a038216907fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669290600090a250565b6000600160a060020a0382161515610b9257600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b600160a060020a0381161515610bc757600080fd5b610bd18282610b7b565b15610bdb57600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b600160a060020a0381161515610c1557600080fd5b610c1f8282610b7b565b1515610c2a57600080fd5b600160a060020a0316600090815260209190915260409020805460ff1916905556fe8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925a165627a7a723058205f6926d28db4897e8e86ca596e91c38804e91be6b79f762433d115de54b220cb0029",
  "sourceMap": "273:200:8:-;;;342:129;8:9:-1;5:2;;;30:1;27;20:12;5:2;342:129:8;;;;;;;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;342:129:8;405:163:17;;;;;;;;;;;;342:129:8;405:163:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;275:22:12;286:10;275;;;;:22;:::i;:::-;493:12:17;;;;:5;;:12;;;;;:::i;:::-;-1:-1:-1;515:16:17;;;;:7;;:16;;;;;:::i;:::-;-1:-1:-1;541:9:17;:20;;-1:-1:-1;;541:20:17;;;;;;;;;;;;-1:-1:-1;430:34:8;;-1:-1:-1;436:10:8;448:15;430:5;;;;:34;:::i;:::-;342:129;273:200;;685:119:12;741:21;:8;754:7;741:12;;;;;;:21;:::i;:::-;777:20;;-1:-1:-1;;;;;777:20:12;;;;;;;;685:119;:::o;6198:263:15:-;-1:-1:-1;;;;;6272:21:15;;;;6264:30;;;;;;6320:12;;:23;;6337:5;6320:16;;;;;;:23;:::i;:::-;6305:12;:38;-1:-1:-1;;;;;6374:18:15;;:9;:18;;;;;;;;;;;:29;;6397:5;6374:22;;;;;;:29;:::i;:::-;-1:-1:-1;;;;;6353:18:15;;:9;:18;;;;;;;;;;;:50;;;;6418:36;;;;;;;6353:18;;:9;;6418:36;;;;;;;;;;6198:263;;:::o;259:181:11:-;-1:-1:-1;;;;;335:21:11;;;;327:30;;;;;;376:18;380:4;386:7;376:3;;;;:18;:::i;:::-;375:19;367:28;;;;;;-1:-1:-1;;;;;406:20:11;:11;:20;;;;;;;;;;;:27;;-1:-1:-1;;406:27:11;429:4;406:27;;;259:181::o;1431:145:14:-;1489:7;1520:5;;;1543:6;;;;1535:15;;;;;;1568:1;1431:145;-1:-1:-1;;;1431:145:14:o;786:162:11:-;858:4;-1:-1:-1;;;;;882:21:11;;;;874:30;;;;;;-1:-1:-1;;;;;;921:20:11;:11;:20;;;;;;;;;;;;;;;786:162::o;273:200:8:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;273:200:8;;;-1:-1:-1;273:200:8;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;",
  "deployedSourceMap": "273:200:8:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;273:200:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;628:81:17;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;628:81:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2735:238:15;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;2735:238:15;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;936:89;;;:::i;:::-;;;;;;;;;;;;;;;;3436:294;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;3436:294:15;;;;;;;;;;;;;;;;;:::i;930:81:17:-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4233:317:15;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;4233:317:15;;;;;;;;:::i;443:128:18:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;443:128:18;;;;;;;;:::i;295:77:16:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;295:77:16;;:::i;:::-;;1234:104:15;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1234:104:15;-1:-1:-1;;;;;1234:104:15;;:::i;624:93:16:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;624:93:16;;;;;;;;:::i;771:85:17:-;;;:::i;508:90:12:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;508:90:12;-1:-1:-1;;;;;508:90:12;;:::i;604:75::-;;;:::i;5058:327:15:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;5058:327:15;;;;;;;;:::i;1962:137::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;1962:137:15;;;;;;;;:::i;395:107:12:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;395:107:12;-1:-1:-1;;;;;395:107:12;;:::i;1669:129:15:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;1669:129:15;;;;;;;;;;:::i;628:81:17:-;697:5;690:12;;;;;;;;-1:-1:-1;;690:12:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;665:13;;690:12;;697:5;;690:12;;697:5;690:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;628:81;:::o;2735:238:15:-;2800:4;-1:-1:-1;;;;;2824:21:15;;;;2816:30;;;;;;2866:10;2857:20;;;;:8;:20;;;;;;;;-1:-1:-1;;;;;2857:29:15;;;;;;;;;;;;:37;;;2909:36;;;;;;;2857:29;;2866:10;-1:-1:-1;;;;;;;;;;;2909:36:15;;;;;;;;;;-1:-1:-1;2962:4:15;2735:238;;;;:::o;936:89::-;1006:12;;936:89;:::o;3436:294::-;-1:-1:-1;;;;;3560:14:15;;3515:4;3560:14;;;:8;:14;;;;;;;;3575:10;3560:26;;;;;;;;:37;;3591:5;3560:37;:30;:37;:::i;:::-;-1:-1:-1;;;;;3531:14:15;;;;;;:8;:14;;;;;;;;3546:10;3531:26;;;;;;;:66;3607:26;3540:4;3623:2;3627:5;3607:9;:26::i;:::-;-1:-1:-1;;;;;3648:54:15;;3675:14;;;;:8;:14;;;;;;;;3663:10;3675:26;;;;;;;;;;;3648:54;;;;;;;3663:10;;3648:54;-1:-1:-1;;;;;;;;;;;3648:54:15;;;;;;;;;;-1:-1:-1;3719:4:15;3436:294;;;;;:::o;930:81:17:-;995:9;;;;930:81;:::o;4233:317:15:-;4313:4;-1:-1:-1;;;;;4337:21:15;;;;4329:30;;;;;;4411:10;4402:20;;;;:8;:20;;;;;;;;-1:-1:-1;;;;;4402:29:15;;;;;;;;;;:45;;4436:10;4402:45;:33;:45;:::i;:::-;4379:10;4370:20;;;;:8;:20;;;;;;;;-1:-1:-1;;;;;4370:29:15;;;;;;;;;;;;:77;;;4462:60;;;;;;4370:29;;-1:-1:-1;;;;;;;;;;;4462:60:15;;;;;;;;;;-1:-1:-1;4539:4:15;4233:317;;;;:::o;443:128:18:-;511:4;350:20:12;359:10;350:8;:20::i;:::-;342:29;;;;;;;;527:16:18;533:2;537:5;527;:16::i;:::-;-1:-1:-1;560:4:18;443:128;;;;:::o;295:77:16:-;341:24;347:10;359:5;341;:24::i;:::-;295:77;:::o;1234:104:15:-;-1:-1:-1;;;;;1315:16:15;1289:7;1315:16;;;;;;;;;;;;1234:104::o;624:93:16:-;688:22;698:4;704:5;688:9;:22::i;:::-;624:93;;:::o;771:85:17:-;842:7;835:14;;;;;;;;-1:-1:-1;;835:14:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;810:13;;835:14;;842:7;;835:14;;842:7;835:14;;;;;;;;;;;;;;;;;;;;;;;;508:90:12;350:20;359:10;350:8;:20::i;:::-;342:29;;;;;;;;572:19;583:7;572:10;:19::i;604:75::-;647:25;661:10;647:13;:25::i;:::-;604:75::o;5058:327:15:-;5143:4;-1:-1:-1;;;;;5167:21:15;;;;5159:30;;;;;;5241:10;5232:20;;;;:8;:20;;;;;;;;-1:-1:-1;;;;;5232:29:15;;;;;;;;;;:50;;5266:15;5232:50;:33;:50;:::i;1962:137::-;2023:4;2039:32;2049:10;2061:2;2065:5;2039:9;:32::i;395:107:12:-;451:4;474:21;:8;487:7;474:21;:12;:21;:::i;:::-;467:28;395:107;-1:-1:-1;;395:107:12:o;1669:129:15:-;-1:-1:-1;;;;;1767:15:15;;;1741:7;1767:15;;;:8;:15;;;;;;;;:24;;;;;;;;;;;;;1669:129::o;1205:145:14:-;1263:7;1290:6;;;;1282:15;;;;;;-1:-1:-1;1319:5:14;;;1205:145::o;5599:256:15:-;-1:-1:-1;;;;;5686:16:15;;;;5678:25;;;;;;-1:-1:-1;;;;;5732:15:15;;:9;:15;;;;;;;;;;;:26;;5752:5;5732:26;:19;:26;:::i;:::-;-1:-1:-1;;;;;5714:15:15;;;:9;:15;;;;;;;;;;;:44;;;;5784:13;;;;;;;:24;;5802:5;5784:24;:17;:24;:::i;:::-;-1:-1:-1;;;;;5768:13:15;;;:9;:13;;;;;;;;;;;;:40;;;;5823:25;;;;;;;5768:13;;5823:25;;;;;;;;;;;;;5599:256;;;:::o;1431:145:14:-;1489:7;1520:5;;;1543:6;;;;1535:15;;;;;;1568:1;1431:145;-1:-1:-1;;;1431:145:14:o;6198:263:15:-;-1:-1:-1;;;;;6272:21:15;;;;6264:30;;;;;;6320:12;;:23;;6337:5;6320:23;:16;:23;:::i;:::-;6305:12;:38;-1:-1:-1;;;;;6374:18:15;;:9;:18;;;;;;;;;;;:29;;6397:5;6374:29;:22;:29;:::i;:::-;-1:-1:-1;;;;;6353:18:15;;:9;:18;;;;;;;;;;;:50;;;;6418:36;;;;;;;6353:18;;:9;;6418:36;;;;;;;;;;6198:263;;:::o;6687:::-;-1:-1:-1;;;;;6761:21:15;;;;6753:30;;;;;;6809:12;;:23;;6826:5;6809:23;:16;:23;:::i;:::-;6794:12;:38;-1:-1:-1;;;;;6863:18:15;;:9;:18;;;;;;;;;;;:29;;6886:5;6863:29;:22;:29;:::i;:::-;-1:-1:-1;;;;;6842:18:15;;:9;:18;;;;;;;;;;;:50;;;;6907:36;;;;;;;6842:9;;6907:36;;;;;;;;;;;6687:263;;:::o;7339:255::-;-1:-1:-1;;;;;7441:17:15;;;;;;:8;:17;;;;;;;;7459:10;7441:29;;;;;;;;:40;;7475:5;7441:40;:33;:40;:::i;:::-;-1:-1:-1;;;;;7409:17:15;;;;;;:8;:17;;;;;;;;7427:10;7409:29;;;;;;;:72;7491:21;7418:7;7506:5;7491;:21::i;:::-;-1:-1:-1;;;;;7527:60:15;;7557:17;;;;:8;:17;;;;;;;;7545:10;7557:29;;;;;;;;;;;7527:60;;;;;;;7545:10;;7527:60;-1:-1:-1;;;;;;;;;;;7527:60:15;;;;;;;;;;7339:255;;:::o;685:119:12:-;741:21;:8;754:7;741:21;:12;:21;:::i;:::-;777:20;;-1:-1:-1;;;;;777:20:12;;;;;;;;685:119;:::o;810:127::-;869:24;:8;885:7;869:24;:15;:24;:::i;:::-;908:22;;-1:-1:-1;;;;;908:22:12;;;;;;;;810:127;:::o;786:162:11:-;858:4;-1:-1:-1;;;;;882:21:11;;;;874:30;;;;;;-1:-1:-1;;;;;;921:20:11;:11;:20;;;;;;;;;;;;;;;786:162::o;259:181::-;-1:-1:-1;;;;;335:21:11;;;;327:30;;;;;;376:18;380:4;386:7;376:3;:18::i;:::-;375:19;367:28;;;;;;-1:-1:-1;;;;;406:20:11;:11;:20;;;;;;;;;;;:27;;-1:-1:-1;;406:27:11;429:4;406:27;;;259:181::o;514:184::-;-1:-1:-1;;;;;593:21:11;;;;585:30;;;;;;633:18;637:4;643:7;633:3;:18::i;:::-;625:27;;;;;;;;-1:-1:-1;;;;;663:20:11;686:5;663:20;;;;;;;;;;;:28;;-1:-1:-1;;663:28:11;;;514:184::o",
  "source": "/*\n    Collateral token.\n*/\n\npragma solidity >= 0.5.0;\n\nimport 'openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol';\nimport 'openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol';\nimport 'openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol';\n\ncontract TokenA is ERC20Mintable, ERC20Burnable, ERC20Detailed {\n    constructor(uint256 _initial_supply) public ERC20Detailed(\"TokenA\", \"XTA\", 3) {\n        _mint(msg.sender, _initial_supply);\n    }\n}\n",
  "sourcePath": "/home/akru/devel/cdex/contracts/TokenA.sol",
  "ast": {
    "absolutePath": "/home/akru/devel/cdex/contracts/TokenA.sol",
    "exportedSymbols": {
      "TokenA": [
        1066
      ]
    },
    "id": 1067,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1039,
        "literals": [
          "solidity",
          ">=",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "29:25:8"
      },
      {
        "absolutePath": "openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol",
        "file": "openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol",
        "id": 1040,
        "nodeType": "ImportDirective",
        "scope": 1067,
        "sourceUnit": 8319,
        "src": "56:71:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol",
        "file": "openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol",
        "id": 1041,
        "nodeType": "ImportDirective",
        "scope": 1067,
        "sourceUnit": 8233,
        "src": "128:71:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol",
        "file": "openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol",
        "id": 1042,
        "nodeType": "ImportDirective",
        "scope": 1067,
        "sourceUnit": 8291,
        "src": "200:71:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1043,
              "name": "ERC20Mintable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 8318,
              "src": "292:13:8",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20Mintable_$8318",
                "typeString": "contract ERC20Mintable"
              }
            },
            "id": 1044,
            "nodeType": "InheritanceSpecifier",
            "src": "292:13:8"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1045,
              "name": "ERC20Burnable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 8232,
              "src": "307:13:8",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20Burnable_$8232",
                "typeString": "contract ERC20Burnable"
              }
            },
            "id": 1046,
            "nodeType": "InheritanceSpecifier",
            "src": "307:13:8"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1047,
              "name": "ERC20Detailed",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 8290,
              "src": "322:13:8",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20Detailed_$8290",
                "typeString": "contract ERC20Detailed"
              }
            },
            "id": 1048,
            "nodeType": "InheritanceSpecifier",
            "src": "322:13:8"
          }
        ],
        "contractDependencies": [
          7560,
          8201,
          8232,
          8290,
          8318,
          8387
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 1066,
        "linearizedBaseContracts": [
          1066,
          8290,
          8232,
          8318,
          7560,
          8201,
          8387
        ],
        "name": "TokenA",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 1064,
              "nodeType": "Block",
              "src": "420:51:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 1059,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 8546,
                          "src": "436:3:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1060,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "436:10:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 1061,
                        "name": "_initial_supply",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1050,
                        "src": "448:15:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1058,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 8116,
                      "src": "430:5:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 1062,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "430:34:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1063,
                  "nodeType": "ExpressionStatement",
                  "src": "430:34:8"
                }
              ]
            },
            "documentation": null,
            "id": 1065,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "hexValue": "546f6b656e41",
                    "id": 1053,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "400:8:8",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_18c40d09d3be00e8c0eafe4f0ffbd938b1824b54b7ac8efe521dcc1be43de891",
                      "typeString": "literal_string \"TokenA\""
                    },
                    "value": "TokenA"
                  },
                  {
                    "argumentTypes": null,
                    "hexValue": "585441",
                    "id": 1054,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "410:5:8",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_aa7a500ecf207e2b9bccafaa47849c1d2c3babeef6ce76ee9b822c42e3c181bc",
                      "typeString": "literal_string \"XTA\""
                    },
                    "value": "XTA"
                  },
                  {
                    "argumentTypes": null,
                    "hexValue": "33",
                    "id": 1055,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "417:1:8",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_3_by_1",
                      "typeString": "int_const 3"
                    },
                    "value": "3"
                  }
                ],
                "id": 1056,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 1052,
                  "name": "ERC20Detailed",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 8290,
                  "src": "386:13:8",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ERC20Detailed_$8290_$",
                    "typeString": "type(contract ERC20Detailed)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "386:33:8"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1051,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1050,
                  "name": "_initial_supply",
                  "nodeType": "VariableDeclaration",
                  "scope": 1065,
                  "src": "354:23:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1049,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "354:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "353:25:8"
            },
            "returnParameters": {
              "id": 1057,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "420:0:8"
            },
            "scope": 1066,
            "src": "342:129:8",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 1067,
        "src": "273:200:8"
      }
    ],
    "src": "29:445:8"
  },
  "legacyAST": {
    "absolutePath": "/home/akru/devel/cdex/contracts/TokenA.sol",
    "exportedSymbols": {
      "TokenA": [
        1066
      ]
    },
    "id": 1067,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1039,
        "literals": [
          "solidity",
          ">=",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "29:25:8"
      },
      {
        "absolutePath": "openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol",
        "file": "openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol",
        "id": 1040,
        "nodeType": "ImportDirective",
        "scope": 1067,
        "sourceUnit": 8319,
        "src": "56:71:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol",
        "file": "openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol",
        "id": 1041,
        "nodeType": "ImportDirective",
        "scope": 1067,
        "sourceUnit": 8233,
        "src": "128:71:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol",
        "file": "openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol",
        "id": 1042,
        "nodeType": "ImportDirective",
        "scope": 1067,
        "sourceUnit": 8291,
        "src": "200:71:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1043,
              "name": "ERC20Mintable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 8318,
              "src": "292:13:8",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20Mintable_$8318",
                "typeString": "contract ERC20Mintable"
              }
            },
            "id": 1044,
            "nodeType": "InheritanceSpecifier",
            "src": "292:13:8"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1045,
              "name": "ERC20Burnable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 8232,
              "src": "307:13:8",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20Burnable_$8232",
                "typeString": "contract ERC20Burnable"
              }
            },
            "id": 1046,
            "nodeType": "InheritanceSpecifier",
            "src": "307:13:8"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1047,
              "name": "ERC20Detailed",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 8290,
              "src": "322:13:8",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20Detailed_$8290",
                "typeString": "contract ERC20Detailed"
              }
            },
            "id": 1048,
            "nodeType": "InheritanceSpecifier",
            "src": "322:13:8"
          }
        ],
        "contractDependencies": [
          7560,
          8201,
          8232,
          8290,
          8318,
          8387
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 1066,
        "linearizedBaseContracts": [
          1066,
          8290,
          8232,
          8318,
          7560,
          8201,
          8387
        ],
        "name": "TokenA",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 1064,
              "nodeType": "Block",
              "src": "420:51:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 1059,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 8546,
                          "src": "436:3:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1060,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "436:10:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 1061,
                        "name": "_initial_supply",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1050,
                        "src": "448:15:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1058,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 8116,
                      "src": "430:5:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 1062,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "430:34:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1063,
                  "nodeType": "ExpressionStatement",
                  "src": "430:34:8"
                }
              ]
            },
            "documentation": null,
            "id": 1065,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "hexValue": "546f6b656e41",
                    "id": 1053,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "400:8:8",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_18c40d09d3be00e8c0eafe4f0ffbd938b1824b54b7ac8efe521dcc1be43de891",
                      "typeString": "literal_string \"TokenA\""
                    },
                    "value": "TokenA"
                  },
                  {
                    "argumentTypes": null,
                    "hexValue": "585441",
                    "id": 1054,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "410:5:8",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_aa7a500ecf207e2b9bccafaa47849c1d2c3babeef6ce76ee9b822c42e3c181bc",
                      "typeString": "literal_string \"XTA\""
                    },
                    "value": "XTA"
                  },
                  {
                    "argumentTypes": null,
                    "hexValue": "33",
                    "id": 1055,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "417:1:8",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_3_by_1",
                      "typeString": "int_const 3"
                    },
                    "value": "3"
                  }
                ],
                "id": 1056,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 1052,
                  "name": "ERC20Detailed",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 8290,
                  "src": "386:13:8",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ERC20Detailed_$8290_$",
                    "typeString": "type(contract ERC20Detailed)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "386:33:8"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1051,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1050,
                  "name": "_initial_supply",
                  "nodeType": "VariableDeclaration",
                  "scope": 1065,
                  "src": "354:23:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1049,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "354:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "353:25:8"
            },
            "returnParameters": {
              "id": 1057,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "420:0:8"
            },
            "scope": 1066,
            "src": "342:129:8",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 1067,
        "src": "273:200:8"
      }
    ],
    "src": "29:445:8"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.3+commit.10d17f24.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.1",
  "updatedAt": "2019-02-03T21:00:36.180Z",
  "devdoc": {
    "methods": {
      "allowance(address,address)": {
        "details": "Function to check the amount of tokens that an owner allowed to a spender.",
        "params": {
          "owner": "address The address which owns the funds.",
          "spender": "address The address which will spend the funds."
        },
        "return": "A uint256 specifying the amount of tokens still available for the spender."
      },
      "approve(address,uint256)": {
        "details": "Approve the passed address to spend the specified amount of tokens on behalf of msg.sender. Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729",
        "params": {
          "spender": "The address which will spend the funds.",
          "value": "The amount of tokens to be spent."
        }
      },
      "balanceOf(address)": {
        "details": "Gets the balance of the specified address.",
        "params": {
          "owner": "The address to query the balance of."
        },
        "return": "An uint256 representing the amount owned by the passed address."
      },
      "burn(uint256)": {
        "details": "Burns a specific amount of tokens.",
        "params": {
          "value": "The amount of token to be burned."
        }
      },
      "burnFrom(address,uint256)": {
        "details": "Burns a specific amount of tokens from the target address and decrements allowance",
        "params": {
          "from": "address The address which you want to send tokens from",
          "value": "uint256 The amount of token to be burned"
        }
      },
      "decimals()": {
        "return": "the number of decimals of the token."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Decrease the amount of tokens that an owner allowed to a spender. approve should be called when allowed_[_spender] == 0. To decrement allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol Emits an Approval event.",
        "params": {
          "spender": "The address which will spend the funds.",
          "subtractedValue": "The amount of tokens to decrease the allowance by."
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Increase the amount of tokens that an owner allowed to a spender. approve should be called when allowed_[_spender] == 0. To increment allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol Emits an Approval event.",
        "params": {
          "addedValue": "The amount of tokens to increase the allowance by.",
          "spender": "The address which will spend the funds."
        }
      },
      "mint(address,uint256)": {
        "details": "Function to mint tokens",
        "params": {
          "to": "The address that will receive the minted tokens.",
          "value": "The amount of tokens to mint."
        },
        "return": "A boolean that indicates if the operation was successful."
      },
      "name()": {
        "return": "the name of the token."
      },
      "symbol()": {
        "return": "the symbol of the token."
      },
      "totalSupply()": {
        "details": "Total number of tokens in existence"
      },
      "transfer(address,uint256)": {
        "details": "Transfer token for a specified address",
        "params": {
          "to": "The address to transfer to.",
          "value": "The amount to be transferred."
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfer tokens from one address to another. Note that while this function emits an Approval event, this is not required as per the specification, and other compliant implementations may not emit the event.",
        "params": {
          "from": "address The address which you want to send tokens from",
          "to": "address The address which you want to transfer to",
          "value": "uint256 the amount of tokens to be transferred"
        }
      }
    }
  },
  "userdoc": {
    "methods": {}
  }
}